n
n
n
n
n
n
n
n
n
n
n
n
n
n
step
n
n
n
n
n
n
n
n
step
n
p frame_size_in_bytes
n
n
n
p package_offset
n
step
n
n
n
n
step
p m_valid
n
p t_flush
n
n
p result
quit
r
q
b main
run
n
n
n
n
n
n
n
n
n
n
n
n
n
step
n
q
b main
r
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
step
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
q
r
q
r
n
n
continue
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
quit
b main
r
n
n
n
n
n
n
n
n
n
n
n
n
n
n
step
n
n
n
n
n
n
q
b audio_converter.cpp:136
r
n
p data
p *data
nn
p data_size
n
p data_size
n
p m_valid
q
q
q
b audio_converter.cpp:269
r
p result
p AVERROR_EOF
q
b audio_converter.cpp:193
r
p frame_size_in_bytes 
q
b audio_converter.cpp::199
b audio_converter.cpp:199
r
n
p frame_size_in_bytes
p m_frame->nb_samples
p AV_NUMBER_DATA_POINTERS
p AV_NUM_DATA_POINTERS
p m_frame->channels
p m_frame->linesize[0]
p m_frame->linesize[1]
p m_frame->linesize[2]
n
n
n
n
step
n
n
step
n
q
b AudioConverter::copy_to_frame(unsigned char*, unsigned long, unsigned long)
r
n
p m_frame->nb_samples
p t_frame_size_bytes 
q
b AudioConverter::encode_package(std::shared_ptr<AudioPackage>&, std::vector<unsigned char, std::allocator<unsigned char> >&) 
r
n
n
n
p nb_frames 
p t_package_len
p t_package->m_len
p m_frame->linesize[0]
q
q
b AudioConverter::validate_sample_format() 
r
n
p sample_formats[0]
p sample_formats[1]
q
b AudioConverter::validate_sample_rate() 
r
n
p m_encoder_codec->supported_samplerates[0]
p m_encoder_codec->supported_samplerates
p m_encoder_codec
p m_encoder_codec->supported_framerates 
p m_encoder_codec->supported_samplerates 
q
b AudioConverter::decode_frames(std::unique_ptr<LockFreeAudioQueue, std::default_delete<LockFreeAudioQueue> >&) 
r
p m_decoder_context->sample_fmt 
q
